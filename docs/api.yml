openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22033
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page (default is 50)
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    # La pagination permet de réduire la charge sur le serveur en limitant la quantité de données renvoyée à la fois,
    # De plus, elle facilite la navigation pour les clients en leur permettant de parcourir les résultats de manière plus gérable,
    # en demandant des pages spécifiques de données.
  /books/{bookId}:
    delete:
      tags:
        - "Books"
      summary: Remove books
      operationId: deleteBooks
      parameters:
        - in: query
          name: Remove books
          description: Delete book by id
          required: true
          schema:
            type: string

      responses:
        204:
          description: Books deleted successfully

  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Retrieve a list of authors, filterable by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page number for pagination (default is 1)
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page (default is 50)
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    # a- Oui, la gestion de la pagination à travers les entêtes de la requête est techniquement possible.
    # Cependant, il est généralement préférable d'utiliser des paramètres de requête pour plusieurs raisons.
    # Les paramètres de requête sont plus visibles pour les utilisateurs de l'API, ce qui les rend plus explicites et faciles à comprendre.

    # b- La décision de gérer la pagination à travers les entêtes de la requête ou les paramètres de requête dépend de la conception de l'API et des besoins spécifiques.
    # Cependant, il est généralement recommandé d'utiliser des paramètres de requête pour la pagination.

    put:
      tags:
        - "Authors"
      summary: Create or update authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

  /authors/{authorId}:
    delete:
      tags:
        - "Authors"
      summary: Delete authors
      operationId: deleteAuthors
      parameters:
        - in: path
          name: id
          description: Remove author by given id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Authors deleted successfully
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify author for a book by Id
      operationId: updateBook
      parameters:
        - in: path
          name: bookId
          description: Id of book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of author
          required: true
          schema:
            type: string
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Book"

  /books/authors:
    put:
      tags:
        - Books
      summary: Modify authors for a books by Id
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
                required:
                  - "bookId"
                  - "authorId"
      responses:
        200:
          description: Updated books with authors
# b_1 UpdateBookAuthor possède uniquement les identifiants de CrupdateBook (bookId) et
#Author (authorId) parce qu'il s'agit d'une opération de mise à jour des
#associations entre les livres (CrupdateBook) et les auteurs (Author)

# b_2 UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et de Author dans les cas où l'opération
# PUT /books/authors est conçue pour mettre à jour directement les propriétés des livres et des auteurs associés.

components:
  schemas:
    Book:
      type: object

      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
